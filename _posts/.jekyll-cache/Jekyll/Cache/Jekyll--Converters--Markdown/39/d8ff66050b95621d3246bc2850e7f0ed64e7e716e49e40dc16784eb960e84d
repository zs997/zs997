I"<h1 id="题目描述">题目描述</h1>
<p>给出一个仅包含字符’(‘,’)’,’{‘,’}’,’[‘和’]’,的字符串，判断给出的字符串是否是合法的括号序列
括号必须以正确的顺序关闭，”()”和”()[]{}”都是合法的括号序列，但”(]”和”([)]”不合法。</p>
<h1 id="分析">分析</h1>
<ul>
  <li>使用栈结构，在遍历字符的时候，如果是正括号，压栈，如果是反括号，弹出一个栈顶元素，判断是否和反括号匹配。如果匹配继续，反之是不合法的。最后如果栈被清空了，说明所有元素都匹配，则是合法序列。
    <h1 id="java代码">java代码</h1>
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isValid</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">if</span><span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">s</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">""</span><span class="o">)){</span><span class="k">return</span> <span class="kc">false</span><span class="o">;}</span>    
      <span class="kt">char</span> <span class="o">[]</span> <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
      <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>        
      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">data</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
          <span class="k">if</span><span class="o">(</span><span class="n">isForward</span><span class="o">(</span><span class="n">data</span><span class="o">[</span><span class="n">i</span><span class="o">])){</span>
              <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">data</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
          <span class="o">}</span><span class="k">else</span><span class="o">{</span>
              <span class="k">if</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
                  <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
              <span class="o">}</span><span class="k">else</span><span class="o">{</span>
                  <span class="kt">char</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                  <span class="k">if</span><span class="o">(!</span><span class="n">isMatch</span><span class="o">(</span><span class="n">temp</span><span class="o">,</span><span class="n">data</span><span class="o">[</span><span class="n">i</span><span class="o">])){</span>
                      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
                  <span class="o">}</span>
              <span class="o">}</span>
          <span class="o">}</span>
      <span class="o">}</span>
      <span class="k">if</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
          <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
      <span class="o">}</span><span class="k">else</span><span class="o">{</span>
          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
      <span class="o">}</span>        
  <span class="o">}</span>
  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isMatch</span><span class="o">(</span><span class="kt">char</span> <span class="n">a</span><span class="o">,</span><span class="kt">char</span> <span class="n">b</span><span class="o">){</span>
      <span class="k">if</span><span class="o">(</span> <span class="o">(</span><span class="n">a</span><span class="o">==</span><span class="sc">'('</span><span class="o">&amp;&amp;</span> <span class="n">b</span><span class="o">==</span><span class="sc">')'</span><span class="o">)||(</span><span class="n">a</span><span class="o">==</span><span class="sc">'{'</span><span class="o">&amp;&amp;</span><span class="n">b</span><span class="o">==</span><span class="sc">'}'</span><span class="o">)||</span> <span class="o">(</span><span class="n">a</span><span class="o">==</span><span class="sc">'['</span><span class="o">&amp;&amp;</span><span class="n">b</span><span class="o">==</span><span class="sc">']'</span><span class="o">)){</span>
          <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
      <span class="o">}</span>
      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isForward</span><span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">){</span>
      <span class="k">if</span><span class="o">(</span><span class="n">c</span> <span class="o">==</span><span class="sc">'('</span><span class="o">||</span><span class="n">c</span> <span class="o">==</span><span class="sc">'{'</span><span class="o">||</span><span class="n">c</span> <span class="o">==</span><span class="sc">'['</span><span class="o">){</span>
          <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
      <span class="o">}</span>
      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>
:ET